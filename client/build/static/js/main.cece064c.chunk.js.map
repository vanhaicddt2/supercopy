{"version":3,"sources":["api/user.js","TransferToMainWeb.jsx","NewRouter.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["getData","user","token","newURL","axios","get","headers","Authorization","saveData","data","post","TransferToMainWeb","useState","copy1","copy2","setData","msg","setMsg","changeContent","target","value","newData","useEffect","a","useApi","result","console","log","takeData","className","style","textAlign","alignItems","margin","width","color","class","position","for","type","name","id","aria-describedby","placeholder","onChange","e","text","onCopy","xmlns","top","right","height","fill","viewBox","fill-rule","d","clip-rule","onClick","updateServer","NewRouter","marginTop","path","component","exact","App","useDispatch","useSelector","state","auth","Boolean","window","location","hostname","match","combineReducers","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","DataProvider","children","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cece064c.chunk.js","sourcesContent":["import axios from 'axios';\n// SURVEY ROTEN\n\nexport function getData(user, token) {\n    let newURL = \"/user/take_copy/\"+user;\n    return axios.get(`${newURL}`,{\n        headers: { Authorization: token }\n    });\n};\n\nexport function saveData(user, data, token) {\n    let newURL = \"/user/save_copy/\"+user;\n    return axios.post(`${newURL}`,data,{\n        headers: { Authorization: token }\n    });\n};","import React, { useEffect, useState } from 'react';\nimport * as useApi from './api/user';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n// import './App.css';\n\nfunction TransferToMainWeb() {\n  const [data, setData] = useState({\n    copy1: \"\",\n    copy2: \"\"\n  })\n\n  const [msg, setMsg] = useState(\"test\");\n\n  useEffect(() => {\n      const takeData = async () => {\n         const result = await useApi.getData(\"vanhaicddt2\",\"token\");\n\n         if(result){\n            setData({\n              copy1: result.data.data.copy1,\n              copy2: result.data.data.copy2\n            })\n          } else {\n         }\n         console.log(\"result\", result);\n      }\n\n      takeData();\n  },[])\n\n\n  function changeContent(target, value) {\n     const newData = { ... data }\n     newData[target] = value;\n     setData(newData);\n  }\n\n  function updateToServer() {\n    const updateServer = async () => {\n      const result = await useApi.saveData(\"vanhaicddt2\", data, \"token\");\n   }\n\n   updateServer();\n  }\n\n  return (\n    <div className=\"App p-5\" style={{ textAlign:'center', alignItems:'center', margin: 'auto'}}>\n      <h1 style={{width:'100%'}}>Copy Test by Hai</h1>\n      <div style={{color:''}}>MSG: {msg}</div>\n      <div class=\"form-group\" style={{ position:'relative'}}>\n          <label for=\"exampleInputEmail1\">Text Copy 1</label>\n          <input value={data.copy1} type=\"text\" name=\"copy1\"  class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"copy 1\"\n                  onChange={e => changeContent(e.target.name, e.target.value)} />\n          <CopyToClipboard text={data.copy1} onCopy={()=>setMsg(\"Success copy 1\")}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" \n                style={{position:'absolute', top:'31px', right: '0'}}\n                width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"icon-sm\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z\" clip-rule=\"evenodd\"></path></svg>\n            {/* <button>Sao chép</button> */}\n          </CopyToClipboard>\n      </div>\n\n      <div class=\"form-group\" style={{ position:'relative'}}>\n          <label for=\"exampleInputEmail1\">Text Copy 2</label>\n          <input value={data.copy2} type=\"text\" name=\"copy2\"  class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"copy 2\"\n                  onChange={e => changeContent(e.target.name, e.target.value)} />\n          <CopyToClipboard text={data.copy2} onCopy={()=>setMsg(\"Success copy 2\")}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" \n                style={{position:'absolute', top:'31px', right: '0'}}\n                width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"icon-sm\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z\" clip-rule=\"evenodd\"></path></svg>\n            {/* <button>Sao chép</button> */}\n          </CopyToClipboard>\n      </div>\n\n      <button className='btn btn-primary mt-3' onClick={()=>updateToServer()}>Change Content</button>\n    </div>\n  );\n}\n\nexport default TransferToMainWeb;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n// import NotFound from './components/body/notfound/NotFound';\nimport TransferToMainWeb from './TransferToMainWeb';\n\n\nfunction NewRouter() {\n\n    return (\n        <section style={{ marginTop: 'unset' }}>\n            <Switch>\n                {/* <Route path=\"/survey/make_new/:idRoom\"  component={SurveyOnline} exact/>\n                <Route path=\"/survey/make\"  component={SurveyOnline} exact/>\n                <Route path=\"/survey/home/:idBranch\"  component={Home} exact/>\n                <Route path=\"/waiting/make\"  component={SurveyOnline} exact/>\n                <Route path=\"/survey/make/:idWaiting\"  component={SurveyOnline} exact/>\n                <Route path=\"/survey/view/:idSurvey\" component={SurveyOnline} exact/>\n                <Route path=\"/survey/complete/:language/:idBranch\" component={ThankPage} exact/>\n                <Route path=\"/survey/complete/:language\" component={ThankPage} exact/>\n                <Route path=\"/roten/make_new/:idRoten\"  component={RotenSurvey} exact/>\n                <Route path=\"/make_id/:idBranch\" component={MakeIDByList} exact/> */}\n                {/* <Route path=\"/survey/complete/:language\" component={ThankPage} exact/> */}\n                <Route path=\"/\"  component={TransferToMainWeb} exact/>\n                {/* <Route path=\"/*\"  component={NotFound} exact/> */}\n            </Switch>\n        </section>\n    );\n}\n\nexport default NewRouter;\n","import React from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport NewRouter from './NewRouter';\n\nfunction App() {\n  const dispatch = useDispatch()\n  const token = useSelector(state => state.token)\n  const auth = useSelector(state => state.auth)\n\n  // useEffect(() => {\n  //   const firstLogin = localStorage.getItem('firstLogin')\n  //   if(firstLogin){\n  //     const getToken = async () => {\n  //       const res = await axios.post('/user/refresh_token', null)\n  //       dispatch({type: 'GET_TOKEN', payload: res.data.access_token})\n  //     }\n  //     getToken()\n  //   }\n  // },[auth.isLogged, dispatch])\n\n  // useEffect(() => {\n  //   if(token){\n  //     const getUser = () => {\n  //       dispatch(dispatchLogin())\n\n  //       return fetchUser(token).then(res => {\n  //         dispatch(dispatchGetUser(res))\n  //       })\n  //     }\n  //     getUser()\n  //   }\n  // },[token, dispatch])\n\n  return (\n    <Router>\n      <div className=\"App\">\n        {/* <Header />\n        <Body /> */}\n        <NewRouter />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux'\n\nexport default combineReducers({\n\n});\n","import React from 'react'\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport rootReducer from './reducers/'\n\nconst store = createStore(rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nfunction DataProvider({children}) {\n    return (\n        <Provider store={store}>\n            {children}\n        </Provider>\n    )\n}\n\nexport default DataProvider\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport DataProvider from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataProvider>\n      <App />\n    </DataProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}